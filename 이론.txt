231228 - HTML, CSS

<기본 이론>
- 인터넷: 여러 대의 컴퓨터를 하나로 연결해주는 거대한 통신망
- 웹: 인터넷 상의 컴퓨터들 간에 정보를 공유할 수 있도록 해주는 네트워크 시스템
ㄴ> 결론은 하나의 시스템... 목적은 정보의 교환

- HTML, CSS를 이용해 만든 화면 = '웹 페이지' -> 웹 페이지들이 그룹으로 묶이고 연결되어 '웹 사이트' 형성

- HTML(HyperText Markup Language)
ㄴ> 하이퍼 텍스트와 콘텐츠를 표시해주는 언어
(웹 브라우저를 통해 표시되는 웹페이지의 콘텐츠를 정의하기 위해 사용하는 언어)

※ 주석: ctrl + / ... <!-- 주석내용 -->

- 태그의 형태
1. <여는태그>콘텐츠</닫는태그>
2. 단일태그: <태그명> or <태그명/>

- 태그 작성시...
1. 태그 이름은 소문자로 작성
2. 여는 태그와 닫는 태그를 정확히 입력
3. 태그의 콘텐츠로 또 다른 태그가 포함될 수 있음
4. 들여쓰기를 적절하게 사용하는 것이 좋음(적극 권장~)

- 속성: 태그의 부가적인 기능을 정의하는 것
1. <태그명 속성(속성명)="값"(속성값)>콘텐츠</태그명>
2. 단일태그: <태그명 속성="값" 속성="값">

- HTML 문서에서... 문서구조!
1. 문서의 정보를 기입하는 부분: head
<head>
    문서의 정보
</head>

2. 문서의 내용을 기입하는 부분: body
<body>
    화면에 표시될 내용
</body>

^ 얘네들을 이쁘게 이렇게~
<!DOCTYPE html>
<html>
    <head>
        문서의 정보
    </head>
    <body>
        화면에 표시될 내용
    </body>
</html>

- 다양한 문단 표시
1. <p>/ 태그: 하나의 문단 표현, 문단과 문단 사이에는 여백이 존재
2. <h1~h6>/ 태그: 제목(표제) 요소를 나타내는 태그, 1일 때 가장 크고, 6일 때 가장 작음
3. <hr> 태그: 수평선을 표시하는 태그
4. <br/> 태그: 줄바꿈
5. &nbsp; : 공백을 두 번 이상 표시하고자 할 때 사용

- HTML 텍스트의 특징
1. 엔터를 이용한 줄바꿈을 무시함 -> <br> 사용으로 해결
2. 스페이스를 이용한 공백을 한 번씩만 허용함(= 스페이스 여러개가 안먹힘)
ㄴ> &nbsp; 로 해결 -> 엔티티 코드라고 부르더라


- 요소의 구분
1. <블록 레벨 요소 />
ㄴ> 자기가 속한 영역의 너비(가로칸)를 모두 차지하여 블록을 형성
(h1, p 태그 등이 그 예시)

2. <인라인 요소 />
ㄴ> 자기에게 필요한 만큼의 공간만 차지(추가할때마다 옆으로 붙음)
(예시)
- <mark>/ : 형광펜 효과
- <strong>/: 볼드 효과
- <em>/: 이탤릭체 효과
- <q>/: 인용구 효과("~")
- <s>/: 취소선 효과


- 컨테이너
ㄴ> 콘텐츠나 레이아웃에 영향을 주지 않고, 단지 다른 요소 여럿을 묶어 관리하기
편하게 만드는 역할을 하는 요소를 '컨테이너'라고 한다.
- <div></div>: 블록 레벨 컨테이너
- <span></span>: 인라인 컨테이너

- 전역속성
ㄴ> 모든 HTML 태그에서 공통으로 사용할 수 있는 속성
- id: 요소에 고유한 이름을 부여하는 식별자 역할
ㄴ> 얘는 하나만 줄 수 있음
- class: 요소를 그룹 별로 묶을 수 있는 식별자 역할
ㄴ> 별도의 식별 값을 여러개에 줄 수 있음
- style: 요소에 적용할 CSS 스타일 선언
- title: 요소의 추가 정보를 제공하는 텍스트, 툴팁 제공
ㄴ> 툴팁: 요소에다 마우스를 얹었을 때 나타나는 말풍선


- img 태그
ㄴ> 이미지를 표시할 때 사용하는 태그(단일 태그)
- src 속성
src에 이미지의 url을 작성해야 함
=> <img src="url"/>

- 추가 속성 alt, width, height
1. alt는 alternative의 약자로... 대체 텍스트 역할을 함.
- 이미지가 로딩 되기 전 or 이미지 로딩 실패한 경우에,
이미지 대신에 대체 텍스트가 표시됨.

2. 너비는 width, 높이는 height 사용.
ㄴ> 이때 너비와 높이는 각각 px(픽셀) 단위로 적용됨
ㄴ> width 만 적어도 알아서 비율이 조정됨

==========================================

- 링크: 현재 문서에서 다른 무서로 이동할 수 있는 수단
- a 태그
ㄴ> 다른 페이지, 전화번호, 이메일 주소 등 다양한 유형의 콘텐츠로 연결되는 링크(연결) 역할을 함.
ㄴ> 이때 href 특성이 필요함!
(ex)
<a href="주소">
    주소로 이동하고 싶어요
</a>

- a 태그에 target 특성을 추가하면, 새로운 문서를 열 때
현재 탭에서 열지, 새로운 탭에서 열지 결정할 수 있음.
target="_self" (현재 탭에서 열기)
target="_blank" (새로운 탭에서 열기)


- 목록: 연관 있는 항목(item)들을 나열한 것
1. 순서 없는 목록
<ul></ul>
2. 순서 있는 목록(순차적인 숫자로 이뤄져 있음)
<ol></ol>

... 그러나 <li> 태그도 존재하는데?!
ㄴ> 목록에 들어가는 항목 하나 하나를 표현할 때 사용하는 태그
<li> 태그를 감싸는 태그가 무엇이냐에 따라 기호가 달라짐
(※ <ul>, <ol>, <li> 모두 블록 레벨 요소를 만드는 태그)


- 표: 행(가로), 열(세로)로 이뤄진 구조로, 행과 열이 만나는 지점인 셀(cell)이 있음.
<table>: 하나의 표를 나타내는 태그
<tr>: 표 안에서 하나의 행을 나타내는 태그
<th>: 행 안에서 제목에 해당하는 셀을 나타내는 태그
<td>: 행 안에서 콘텐츠에 해당하는 셀을 나타내는 태그

- <table border="1"> -> border은 테이블의 테두리 두께를 지정함
- <caption>/ -> table 태그의 안쪽에서 표에 대한 설명을 나타내는 역할 수행.(기본값: 가운데 정렬)

(셸을 그룹으로 묶어 관리할 수도 있는데...)
- <thead> -> 표의 제목이나 주제를 나타내는 영역
- <tbody> -> 표의 본문을 나타내는 영역
- <tfoot> -> 표의 요약글이나 맺음말을 나타내는 영역

ㄴ> 약간 <head> <body> 이걸 table 버전으로 만들어 사용하는 느낌!!


- 사용자로부터 입력 받기 => <input>
input의 핵심은 type 속성!!!
<input type="데이터 유형(어떤 유형의 데이터를 입력 받을 것인지...)">

<텍스트를 입력받는 다양한 type들>
- text: 기본값. 텍스트 입력 받기
- email: 이메일 입력 받기
- password: 비밀번호 입력 받기
- search: 검색할 텍스트 입력 받기
- date: 날짜, 시간 입력 받기

<수치를 입력받는 type들>
- color: 색깔을 선택할 수 있음
- number: 수치를 선택할 수 있음
- range: 수준(달성도)를 선택할 수 있음


- <label> 태그: 입력 요소에 라벨을 붙이는 역할을 함.(ex: 아이디, 비밀번호 칸 앞의 글자)


<input 외 입력 태그들!>

1. <select>
ㄴ> 다수의 옵션을 포함할 수 있는 선택 메뉴를 만든다.
+ 메뉴안에 포함되는 옵션은 <option> 태그를 사용하여 표현함.
EX
<select>
    <option>커피</option>
    <option>코코아</option>
</select>

※ option에는 value라는 속성을 부여하여 값 구별이 가능함.
ㄴ> <option value="coffee">커피</option> 이런식으로 


2. <textarea> -> 여러 줄의 텍스트를 입력받는 방법
(input 태그에서는 엔터가 먹히지 않아 여러줄의 텍스트를 적는 것이 불가능함)
<textarea cols="10"(가로길이) rows="6"(세로길이)></textarea>
ㄴ> 단, 글자마다 너비가 다르기에 정확히 10개로 맞춰지지는 않음!
- rows는 행의 수.

3. <progress>
ㄴ> 작업이 어느 정도 진행되었는지 나타낼 때 사용하는 태그
<progress value="60"(화면 표시 진척도) max="100"(작업 완료값..최댓값)></progress>

4. <button>
ㄴ> 클릭을 입력으로 받는 버튼 요소를 만드는 태그.
※ input 태그의 type 속성에 "button"을 지정해도 button을 만들 수 있음!
<input type="button" value="클릭">
단, input은 단일태그 인지라, 원하는 글자를 value에 적어야 함.



<양식을 만들고, 입력 정보를 보내보기>
<form> 태그?
- 사용자가 입력한 데이터를 서버로 보내는 것을 목적으로 사용하는 태그
(ex: 로그인 페이지, 회원가입 페이지, 검색어 입력 페이지)

- 서버: 정보를 제공하는 호스트(host)
내가 전달한 정보를 처리해주는 프로그램, 그것을 처리해주는 컴퓨터

사용자: 로그인 원합니다
↓
서버: 오케이
↓
사용자: 로그인 완료!


<form 태그>
- 입력 요소들을 감싸며, 입력 값을 서버 측으로 제출 가능한 태그
- 여러 입력 태그를 포함시키면, 해당 입력 요소들은 양식의 개별 항목으로써 역할 수행

- 다음 속성을 사용해야 서버에 입력 값 전송 가능
1. action: 입력값을 전송할 서버의 url
2. method: 클라이언트가 입력한 데이터를 어떤 식으로 전송할지 정함(GET or POST)

method에 들어가는 GET 과 POST?
1. GET: 서버에 요청을 보내어 응답을 받아낸다.
서버로부터 정보를 '가져오겠다'는 성격의 요청 ("줘")

2. POST: 서버에 요청을 보내어 작업을 수행
서버에 있는 데이터를 추가/수정/삭제 한 후에 응답을 받아냄
서버의 정보를 '조작하겠다'는 성격의 요청

<중요! 이름을 지어줄 것>
- 폼 요소 안에 포함되는 각 입력 요소에는, name 속성을 추가하여
각 입력 항목의 역할을 구별해줄 필요가 있음

왜?) 서버가 정보를 받으면, 서버는 name 속성으로 항목을 구별함.
name이 없으면 서버가 어려움을 겪을 수 있다네

<input type="submit">
<!-- 제출 타입 => form에 있는 입력 값들을 보내는 역할 -->



<의미론적인 코드...시맨틱 태그>
ㄴ> 시맨틱(의미론적인).... 시맨틱 태그는 개발자와 브라우저에게 의미를 제공함

<의미>콘텐츠</의미>
ㄴ> 태그명은 '이 요소가 가진 목적이나 역할은 무엇인가?'를 나타냄!
ㄴ> 검색 엔진에게 좋은 단서가 된다고 함

- 대부분의 시맨틱 태그는 컨테이너 태그(span, div)와 같이 특별한 스타일을 제공하진 않지만...
1. 검색 엔진은 시맨틱 태그(태그명)을 중요 단서로 보는 점
2. 시각 장애가 있는 사용자가 화면 판독기로 페이지를 탐색할 때 참조된다는 점
3. 코드의 가독성이 좋아진다는 점
4. 컨테이너의 남용을 방지할 수 있어 코드 쓰기가 편하다는 점
...의 장점을 지니고 있음

대표적인 시맨틱 태그들
- article: 독립적인 콘텐츠
- aside: 별도의 콘텐츠
- details: 추가적인 상세한 정보
- figcaption: figure의 자막
- figure: 설명 붙는 독립 콘텐츠
- footer: 맺음말

- header: 머릿말
- main: 주된 콘텐츠
- nav: 네비게이션 링크
- section: 콘텐츠의 한 섹션(절)
- summary: detail의 헤더
- time: 강조할 시간

시맨틱 태그 = 컨테이너 태그
이름이 다양하고, 그 이름은 웹사이트에서 구조를 나타내는 역할을 한다.
컨테이너를 대신할 수 있음.



<문서 정보 관리하기>

1. meta 태그
- HTML 문서에 대한 메타데이터를 정의. 즉 '정보'를 의미
- 항상 head 태그 안에 들어가며 문자 세트, 페이지 설명, 키워드, 문서의 작성자 및 뷰포트 설정
지정에 사용함.

- 왜 사용하는가?
: 웹페이지에 대한 정보를 제공하므로 검색 엔진이 페이지를 검색할때 참고할수도 있고,
검색 결과에도 반영할 수 있음.


2. meta 태그가 제공하는 메타데이터의 유형, 속성?
- charset: 문자 세트
ㄴ> 문자 인코딩에 대한 요약 정보 기입하는 속성.
인코딩을 명확하게 기입하지 않을 시, 문자가 깨질 가능성이 생김
ex) <meta charset="utf-8">

- http-equiv: 콘텐츠 속성 정보에 대한 http 헤더
ㄴ> HTTP: 인터넷에서 데이터를 주고 받을 수 있는 프로토콜.
http-equiv가 http 관련 정보를 지정하면, content가 그에 대한 정보(값)를 지정함
<meta http-equiv="x-ua-compatible" content="IE=edge">
ㄴ> IE 브라우저 최신 버전의 엔진을 사용한다는 의미
<meta http-equiv="refresh" content="10">
ㄴ> 페이지를 10초마다 새로고침 한다는 의미

- name: 문서 정보
ㄴ> name 속성을 이름으로, content 속성을 값으로 하여, 문서 정보를
이름+값 쌍의 형태로 제공할 때 사용할 수 있음.
ex) <meta name="author" content="페이지 작성자">

- content: 메타데이터 내용

- 비쥬얼 스튜디오에서 ! 엔터하면 문서 기본 구조가 만들어짐


<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="utf-8">
        <title>이미지 표시하기</title>
    </head>
    <body>
        
    </body>
</html>

https://github.com/Rowhilen/HTML_1